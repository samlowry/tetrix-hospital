version: '3.8' 

x-docker-compose:
  remove-orphans: true

services:
  app:
    build: 
      context: .
      dockerfile: backend2/Dockerfile
    ports:
      - "443:5000"
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - FRONTEND_URL=${FRONTEND_URL}
      - BACKEND_URL=${BACKEND_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - POSTGRES_USER=tetrix
      - POSTGRES_DB=tetrix
      - REDIS_PORT=6379
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  postgres:
    image: postgres:15.6-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
      - ./backend2/setup_db.sql:/docker-entrypoint-initdb.d/setup_db.sql:ro
    environment:
      - POSTGRES_USER=tetrix
      - POSTGRES_DB=tetrix
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tetrix -d tetrix"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7.4.1-alpine
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: