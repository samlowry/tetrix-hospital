#Important common things to follow
- Never touch any parts of code not related to he current task. If you found some critical error not related to current task - just infrom me befor doing something
- Always use UTF-8 encoding!!!!!!
- Always use English in code and code comments! For any Russian interface texts always use separate language files! (in chat you can use Russian)
- Always write comments for any new function, new variable or rewrite if you change its functionality. Keep them such desciptable so you will understand the business logic at the next time
- Prefer iteration and modularizaion over code duplication. Always explore code for existing related logic - maybe some blocks is already partially or fully implemented
- Do not inroduce new dependencies before you not make sure we don't use already different library or framework
- Design services to be stateless; leverage external storage and caches (e.g., Redis) for state persistence

# Important project related things to follow

- project works on server - ssh root@tetrix.hospital.backend.host but it's my laptop shortcut local domain 143.198.98.212 tetrix.hospital.backend.host
- each service works in docker, folder of build is /opt/tetrix-hospital, services names tetrix-hospital-app-1 tetrix-hospital-redis-1 tetrix-hospital-postgres-1
- locally I use just python app.py and local redis/postgres hostnames bound to 127.0.0.1
- the backend folder is backend2/ and project context for start is always this folder!!!
- local migrations runs from prj folder by python migrations/migrate.py
- connect to postgres local is simple (example): psql tetrix -c "SELECT * FROM \"user\";" remote: psql -U tetrix tetrix -c "SELECT * FROM \"user\";"
- debug local user delete - by example: psql tetrix -c "DELETE FROM invite_code WHERE creator_id = 66 OR used_by_id = 66;" && psql tetrix -c "DELETE FROM \"user\" WHERE id = 66;"

# Project context

- the backend (is in backend2/) provide 3 things:
-- work with TG bot api (main use)
-- with frontend (frontend/ - short use to login TON wallet)
-- app API to receive some data relaed to app logic to outside of app

Main user flow is to register user as future TETRIX AI memecoin airdrop user and motivate him to do target actions through interacting with tamagotchi alike personality of AI agent - which have character parameters and emotions bound to its financial metrics

Extra (implementing now) flow - is to begin a viral movement at Meta Threads with event when TETRIX claim it hire human to represent somehow TETRIX IRL with profiling a Threads user through analysing user's last 25 messages and giving him cool report. This flow is completely separate from the main flow and works trough GET variable. Only at the end this flow maybe will join the main flow user initial message.

