name: Deploy Backend

# Trigger on specific changes
on:
  push:
    branches: [ production ]
    paths:
      - 'backend/**'
      - 'nginx/**'
      - 'docker-compose.yml'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ vars.BACKEND_URL }}
    
    steps:
    - uses: actions/checkout@v3
      with:
        ref: production
        fetch-depth: 0  # Fetch all history for proper versioning

    # Set up Docker Buildx for better caching
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true  # This makes buildx available for docker-compose

    # Generate self-signed SSL certificate for initial setup
    - name: Generate SSL Certificate
      run: |
        mkdir -p nginx/ssl
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout nginx/ssl/private.key \
          -out nginx/ssl/certificate.crt \
          -subj "/C=US/ST=CA/L=SF/O=TetrixHospital/CN=tetrix.com"
        chmod 644 nginx/ssl/private.key nginx/ssl/certificate.crt

    - name: Initial Server Setup
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: root
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          # Create required directories
          mkdir -p /opt/tetrix-hospital/nginx/ssl
          mkdir -p /opt/tetrix-hospital/logs/redis
          
          # Setup git and pull code
          cd /opt/tetrix-hospital
          git init
          git config --global --add safe.directory /opt/tetrix-hospital
          git remote add origin https://github.com/samlowry/tetrix-hospital.git || git remote set-url origin https://github.com/samlowry/tetrix-hospital.git
          
          # Switch to production branch
          git fetch origin production
          git checkout production || git checkout -b production
          git reset --hard origin/production
          
          # Save environment variables with proper formatting
          cat > .env << EOL
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          BACKEND_URL=${{ vars.BACKEND_URL }}
          FRONTEND_URL=${{ vars.FRONTEND_URL }}
          EOL
          
          # Ensure proper permissions
          chmod 600 .env

    - name: Copy SSL Certificates
      uses: appleboy/scp-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: root
        key: ${{ secrets.PROD_SSH_KEY }}
        source: "nginx/ssl/*"
        target: "/opt/tetrix-hospital/nginx/ssl"
        strip_components: 2

    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: root
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/tetrix-hospital
          git fetch origin production
          git reset --hard origin/production
          
          # Stop all services first
          docker-compose down
          
          # Save current images for cleanup
          OLD_IMAGES=$(docker images -q tetrix-hospital_app)
          
          # Build and start services with BuildKit caching
          DOCKER_BUILDKIT=1 docker-compose build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from type=registry,ref=tetrix-hospital_app:latest \
            --cache-to type=inline
          docker-compose up -d
          
          # Show logs for debugging
          echo "App logs:"
          docker-compose logs app
          echo "Nginx logs:"
          docker-compose logs nginx
          
          # Show running containers and their status
          docker ps -a
          
          # Remove old app images but keep the last one
          if [ ! -z "$OLD_IMAGES" ]; then
            echo "Cleaning up old images..."
            docker rmi $OLD_IMAGES || true
          fi
          
          # Clean up build cache older than 7 days
          docker builder prune -f --filter until=168h

    # Verify deployment with retries
    - name: Check deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: root
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/tetrix-hospital
          for i in {1..10}; do
            if docker exec tetrix-hospital_app_1 curl -f "http://localhost:5000/health"; then
              echo "All services are healthy"
              exit 0
            fi
            echo "Waiting for services to be healthy... ($i/10)"
            docker-compose ps
            docker-compose logs --tail=50 app
            sleep 10
          done
          echo "Services failed to become healthy"
          exit 1

    # Required GitHub configuration:
    #
    # Action Secrets (sensitive data):
    # - PROD_SSH_KEY: SSH private key for production server
    # - JWT_SECRET_KEY: JWT secret key for backend auth
    # - TELEGRAM_BOT_TOKEN: Telegram bot token from @BotFather
    #
    # Action Variables (non-sensitive):
    # - PROD_HOST: Production server IP
    # - BACKEND_URL: Backend URL (e.g., https://api.tetrix.lol)
    # - FRONTEND_URL: Frontend URL (e.g., https://webapp.tetrix.lol)