name: Deploy Backend and Frontend

# Trigger on specific changes
on:
  push:
    branches: [ production ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'nginx/**'
      - 'docker-compose.yml'
      - '.github/workflows/backend-deploy.yml'

jobs:
  initialize:
    runs-on: ubuntu-latest
    environment:
      name: production-init
      url: ${{ vars.PROD_HOST }}
    # This environment can be manually triggered again if needed
    
    steps:
    - uses: actions/checkout@v3

    # Generate self-signed SSL certificate for initial setup
    # (You can replace it later with a proper one)
    - name: Generate SSL Certificate
      run: |
        mkdir -p nginx/ssl
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout nginx/ssl/private.key \
          -out nginx/ssl/certificate.crt \
          -subj "/C=US/ST=CA/L=SF/O=TetrixHospital/CN=${PROD_HOST}"

    - name: Initial Server Setup
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          # Update system and install dependencies
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y docker.io docker-compose git

          # Add user to docker group
          sudo usermod -aG docker $USER
          
          # Generate PostgreSQL password if not exists
          if [ ! -f /opt/tetrix-hospital/secrets/postgres_password.txt ]; then
            mkdir -p /opt/tetrix-hospital/secrets
            openssl rand -base64 32 > /opt/tetrix-hospital/secrets/postgres_password.txt
            chmod 600 /opt/tetrix-hospital/secrets/postgres_password.txt
          fi
          
          # Create required directories
          sudo mkdir -p ${{ vars.DEPLOY_PATH || '/opt/tetrix-hospital' }}
          sudo chown ${USER}:${USER} ${{ vars.DEPLOY_PATH || '/opt/tetrix-hospital' }}
          mkdir -p ${{ vars.DEPLOY_PATH || '/opt/tetrix-hospital' }}/backups/{postgres,redis}
          
          # Setup logging
          sudo mkdir -p /var/log/nginx
          sudo touch /var/log/tetrix-backup.log
          sudo chown ${USER}:${USER} /var/log/tetrix-backup.log
          sudo chmod 644 /var/log/tetrix-backup.log
          
          # Setup git
          cd ${{ vars.DEPLOY_PATH || '/opt/tetrix-hospital' }}
          git init
          git config --global --add safe.directory ${{ vars.DEPLOY_PATH || '/opt/tetrix-hospital' }}
          git remote add origin https://github.com/${GITHUB_REPOSITORY}.git
          
          # Setup directories
          mkdir -p nginx/ssl
          mkdir -p logs/redis
          
          # Make scripts executable
          chmod +x scripts/*.sh
          
          # Reload shell to apply docker group
          newgrp docker

    - name: Copy SSL Certificates
      uses: appleboy/scp-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        key: ${{ secrets.PROD_SSH_KEY }}
        source: "nginx/ssl/*"
        target: "/opt/tetrix-hospital/nginx/ssl"
        strip_components: 2

    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/tetrix-hospital
          
          # Sync repository to ensure latest code
          git fetch origin production
          git reset --hard origin/production
          
          # Build and update services
          if [[ "${{ steps.changed-files.outputs.backend }}" == "true" ]]; then
            echo "Building and updating backend service..."
            docker-compose up -d --build app
          fi
          
          if [[ "${{ steps.changed-files.outputs.nginx }}" == "true" ]]; then
            echo "Building and updating nginx service..."
            docker-compose up -d --build nginx
          fi
          
          # Clean only dangling images
          docker image prune -f

    # Verify deployment with retries
    - name: Check deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          # Wait for services to be healthy
          for i in {1..30}; do
            HEALTH_OK=true
            
            # Check backend if updated
            if [[ "${{ steps.changed-files.outputs.backend }}" == "true" ]]; then
              if ! curl -f "http://localhost:5000/health"; then
                HEALTH_OK=false
              fi
            fi
            
            if [[ "$HEALTH_OK" == "true" ]]; then
              echo "All services are healthy"
              exit 0
            fi
            
            echo "Waiting for services to be healthy... ($i/30)"
            sleep 2
          done
          echo "Services failed to become healthy"
          exit 1

    - name: Setup Cloudflare Pages env vars
      if: steps.changed-files.outputs.frontend == 'true'
      env:
        CF_API_TOKEN: ${{ secrets.DEPLOY_CF_API_TOKEN }}
        CF_ACCOUNT_ID: ${{ vars.DEPLOY_CF_ACCOUNT_ID }}
        CF_PROJECT_NAME: ${{ vars.DEPLOY_CF_PROJECT_NAME }}
      run: |
        curl -X PUT \
          -H "Authorization: Bearer $CF_API_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "env_vars": {
              "VITE_BACKEND_URL": { "value": "${{ vars.BACKEND_URL }}" },
              "VITE_FRONTEND_URL": { "value": "${{ vars.FRONTEND_URL }}" }
            }
          }' \
          "https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/pages/projects/${CF_PROJECT_NAME}"

    # Required GitHub configuration:
    #
    # Action Secrets (sensitive data):
    # - PROD_SSH_KEY: SSH private key for production server
    # - DEPLOY_CF_API_TOKEN: Cloudflare API token with Pages:Deploy permission
    # - JWT_SECRET_KEY: JWT secret key for backend auth
    # Note: POSTGRES_PASSWORD is generated during initialization
    #
    # Action Variables (non-sensitive, can be monitored):
    # Infrastructure:
    # - PROD_HOST: Production server IP address
    # - DEPLOY_PATH: Deployment path (default: /opt/tetrix-hospital)
    # URLs (no trailing slashes):
    # - FRONTEND_URL: Frontend URL (e.g., https://tetrix-hospital.pages.dev)
    # - BACKEND_URL: Backend URL (e.g., https://api.your-domain.com)
    #   Note: WEBHOOK_URL is auto-generated as ${BACKEND_URL}/telegram-webhook
    #   Note: VITE_API_URL is auto-generated from BACKEND_URL for Cloudflare Pages
    # Cloudflare:
    # - DEPLOY_CF_ACCOUNT_ID: Cloudflare account ID
    # - DEPLOY_CF_PROJECT_NAME: Cloudflare Pages project name
    # Business Logic:
    # - VITE_TON_COLLECTION_ADDRESS: TON NFT collection address