name: Deploy Backend

# Manual trigger only
on:
  workflow_dispatch:
    inputs:
      confirm_deploy:
        description: 'Type "yes" to confirm deployment'
        required: true
        default: 'no'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_deploy == 'yes'
    environment:
      name: production
      url: ${{ vars.BACKEND_URL }}
    
    steps:
    - name: Initial Server Setup
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: root
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          # Install Docker if not exists
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com | sh
          fi
          
          # Ensure Docker daemon is running
          if ! systemctl is-active --quiet docker; then
            systemctl start docker
          fi
          
          # Create required directories
          mkdir -p /opt/tetrix-hospital/nginx/ssl
          mkdir -p /opt/tetrix-hospital/logs/redis
          
          # Generate SSL certificate if not exists
          if [ ! -f /opt/tetrix-hospital/nginx/ssl/certificate.crt ]; then
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /opt/tetrix-hospital/nginx/ssl/private.key \
              -out /opt/tetrix-hospital/nginx/ssl/certificate.crt \
              -subj "/C=US/ST=CA/L=SF/O=TetrixHospital/CN=tetrix.com"
            chmod 644 /opt/tetrix-hospital/nginx/ssl/private.key /opt/tetrix-hospital/nginx/ssl/certificate.crt
          fi
          
          # Save environment variables with proper formatting
          cat > /opt/tetrix-hospital/.env << EOL
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          API_KEY=${{ secrets.API_KEY }}
          BACKEND_URL=${{ vars.BACKEND_URL }}
          FRONTEND_URL=${{ vars.FRONTEND_URL }}
          EOL
          
          # Ensure proper permissions
          chmod 600 /opt/tetrix-hospital/.env

    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: root
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/tetrix-hospital
          
          # Pull latest changes
          git fetch origin production
          git reset --hard origin/production
          
          # Stop all services first
          docker compose down
          
          # Save current images for cleanup
          OLD_IMAGES=$(docker images -q tetrix-hospital_app)
          
          # Build and start services
          DOCKER_BUILDKIT=0 docker compose build --no-cache
          docker compose up -d
          
          # Show logs for debugging
          echo "App logs:"
          docker compose logs app
          echo "Nginx logs:"
          docker compose logs nginx
          
          # Show running containers and their status
          docker ps -a
          
          # Remove old app images but keep the last one
          if [ ! -z "$OLD_IMAGES" ]; then
            echo "Cleaning up old images..."
            docker rmi $OLD_IMAGES || true
          fi

    # Verify deployment with retries
    - name: Check deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: root
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/tetrix-hospital
          for i in {1..10}; do
            if docker exec tetrix-hospital_app_1 curl -f "http://localhost:5000/health"; then
              echo "All services are healthy"
              exit 0
            fi
            echo "Waiting for services to be healthy... ($i/10)"
            docker compose ps
            docker compose logs --tail=50 app
            sleep 10
          done
          echo "Services failed to become healthy"
          exit 1

    # Required GitHub configuration:
    #
    # Action Secrets (sensitive data):
    # - PROD_SSH_KEY: SSH private key for production server
    # - JWT_SECRET_KEY: JWT secret key for backend auth
    # - TELEGRAM_BOT_TOKEN: Telegram bot token from @BotFather
    # - API_KEY: API key for protected endpoints
    #
    # Action Variables (non-sensitive):
    # - PROD_HOST: Production server IP
    # - BACKEND_URL: Backend URL (e.g., https://api.tetrix.lol)
    # - FRONTEND_URL: Frontend URL (e.g., https://webapp.tetrix.lol)