name: Deploy Backend and Frontend

# Trigger on specific changes
on:
  push:
    branches: [ production ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'nginx/**'
      - 'docker-compose.prod.yml'
      - '.github/workflows/backend-deploy.yml'

jobs:
  initialize:
    runs-on: ubuntu-latest
    environment:
      name: production-init
      url: ${{ vars.PROD_HOST }}
    # This environment can be manually triggered again if needed
    
    steps:
    - uses: actions/checkout@v3

    # Generate self-signed SSL certificate for initial setup
    # (You can replace it later with a proper one)
    - name: Generate SSL Certificate
      run: |
        mkdir -p nginx/ssl
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout nginx/ssl/private.key \
          -out nginx/ssl/certificate.crt \
          -subj "/C=US/ST=CA/L=SF/O=TetrixHospital/CN=${PROD_HOST}"

    - name: Initial Server Setup
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: ${{ vars.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          # Update system and install dependencies
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y docker.io docker-compose git

          # Add user to docker group
          sudo usermod -aG docker $USER
          
          # Create required directories
          sudo mkdir -p ${{ vars.DEPLOY_PATH || '/opt/tetrix-hospital' }}
          sudo chown ${USER}:${USER} ${{ vars.DEPLOY_PATH || '/opt/tetrix-hospital' }}
          mkdir -p ${{ vars.DEPLOY_PATH || '/opt/tetrix-hospital' }}/backups/{postgres,redis}
          
          # Setup logging
          sudo mkdir -p /var/log/nginx
          sudo touch /var/log/tetrix-backup.log
          sudo chown ${USER}:${USER} /var/log/tetrix-backup.log
          sudo chmod 644 /var/log/tetrix-backup.log
          
          # Setup git
          cd ${{ vars.DEPLOY_PATH || '/opt/tetrix-hospital' }}
          git init
          git config --global --add safe.directory ${{ vars.DEPLOY_PATH || '/opt/tetrix-hospital' }}
          git remote add origin https://github.com/${GITHUB_REPOSITORY}.git
          
          # Setup directories
          mkdir -p nginx/ssl
          mkdir -p prometheus
          mkdir -p grafana/dashboards
          mkdir -p logs/redis
          
          # Make scripts executable
          chmod +x scripts/*.sh
          
          # Reload shell to apply docker group
          newgrp docker

    - name: Copy SSL Certificates
      uses: appleboy/scp-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: ${{ vars.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        source: "nginx/ssl/*"
        target: "/opt/tetrix-hospital/nginx/ssl"
        strip_components: 2

    - name: Setup Monitoring
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: ${{ vars.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/tetrix-hospital
          
          # Initialize Prometheus
          docker-compose -f docker-compose.prod.yml up -d prometheus
          
          # Initialize Grafana
          docker-compose -f docker-compose.prod.yml up -d grafana
          
          # Setup exporters
          docker-compose -f docker-compose.prod.yml up -d \
            redis-exporter \
            postgres-exporter \
            node-exporter

  deploy:
    needs: initialize
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://${{ vars.PROD_HOST }}
    
    # Required GitHub configuration:
    #
    # Action Secrets (sensitive data):
    # - PROD_SSH_KEY: SSH private key for production server
    # - POSTGRES_PASSWORD: PostgreSQL database password
    # - GRAFANA_PASSWORD: Grafana admin password
    # - DEPLOY_CF_API_TOKEN: Cloudflare API token with Pages:Deploy permission
    #
    # Action Variables (non-sensitive, can be monitored):
    # Infrastructure:
    # - PROD_HOST: Production server IP/domain
    # - PROD_USERNAME: SSH username for production server
    # - APP_PORT: Backend application port (default: 5000)
    # - NGINX_PORT: Nginx listening port (default: 443)
    # - DEPLOY_PATH: Deployment path (default: /opt/tetrix-hospital)
    # Database:
    # - POSTGRES_USER: PostgreSQL username (default: tetrix)
    # - POSTGRES_DB: PostgreSQL database name (default: tetrix)
    # Monitoring:
    # - PROMETHEUS_PORT: Prometheus port (default: 127.0.0.1:9090)
    # - GRAFANA_PORT: Grafana port (default: 127.0.0.1:3000)
    # - GRAFANA_URL: Grafana root URL
    # Cloudflare:
    # - DEPLOY_CF_ACCOUNT_ID: Cloudflare account ID
    # - DEPLOY_CF_PROJECT_NAME: Cloudflare Pages project name
    # Frontend:
    # - VITE_API_URL: Backend API URL
    # - VITE_TELEGRAM_BOT_USERNAME: Telegram bot username
    # - VITE_TON_COLLECTION_ADDRESS: TON NFT collection address
    
    steps:
    - uses: actions/checkout@v3
    
    # Determine changed services
    - name: Check changed files
      id: changed-files
      run: |
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^backend/"; then
          echo "backend=true" >> $GITHUB_OUTPUT
        fi
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^frontend/"; then
          echo "frontend=true" >> $GITHUB_OUTPUT
        fi
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^nginx/"; then
          echo "nginx=true" >> $GITHUB_OUTPUT
        fi

    # Frontend deployment to Cloudflare Pages
    - name: Setup Node.js
      if: steps.changed-files.outputs.frontend == 'true'
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      if: steps.changed-files.outputs.frontend == 'true'
      working-directory: frontend
      run: npm ci

    - name: Build frontend
      if: steps.changed-files.outputs.frontend == 'true'
      working-directory: frontend
      run: npm run build

    - name: Setup Cloudflare Pages env vars
      if: steps.changed-files.outputs.frontend == 'true'
      env:
        CF_API_TOKEN: ${{ secrets.DEPLOY_CF_API_TOKEN }}
        CF_ACCOUNT_ID: ${{ vars.DEPLOY_CF_ACCOUNT_ID }}
        CF_PROJECT_NAME: ${{ vars.DEPLOY_CF_PROJECT_NAME }}
        VITE_API_URL: ${{ vars.VITE_API_URL }}
        VITE_TELEGRAM_BOT_USERNAME: ${{ vars.VITE_TELEGRAM_BOT_USERNAME }}
        VITE_TON_COLLECTION_ADDRESS: ${{ vars.VITE_TON_COLLECTION_ADDRESS }}
      run: |
        curl -X PUT \
          -H "Authorization: Bearer $CF_API_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "env_vars": {
              "VITE_API_URL": { "value": "'"${VITE_API_URL}"'" },
              "VITE_TELEGRAM_BOT_USERNAME": { "value": "'"${VITE_TELEGRAM_BOT_USERNAME}"'" },
              "VITE_TON_COLLECTION_ADDRESS": { "value": "'"${VITE_TON_COLLECTION_ADDRESS}"'" }
            }
          }' \
          "https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/pages/projects/${CF_PROJECT_NAME}"

    - name: Deploy to Cloudflare Pages
      if: steps.changed-files.outputs.frontend == 'true'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.DEPLOY_CF_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ vars.DEPLOY_CF_ACCOUNT_ID }}
      run: |
        cd frontend/dist
        npx wrangler pages deploy . --project-name=${{ vars.DEPLOY_CF_PROJECT_NAME }} --commit-hash=${{ github.sha }}

    - name: Set up Python
      if: steps.changed-files.outputs.backend == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      if: steps.changed-files.outputs.backend == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov

    - name: Run tests
      if: steps.changed-files.outputs.backend == 'true'
      run: |
        cd backend
        pytest --cov=. --cov-report=xml

    - name: Upload coverage
      if: steps.changed-files.outputs.backend == 'true'
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    # Initial backup and cron setup
    - name: Setup Backup System
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: ${{ vars.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/tetrix-hospital
          
          # Make backup script executable
          chmod +x scripts/backup.sh
          
          # Run initial backup if services are running
          if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            echo "Running initial backup..."
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} ./scripts/backup.sh
          else
            echo "Skipping backup - services not running yet"
          fi
          
          # Set up cron job for daily backups at 2 AM
          CRON_CMD="0 2 * * * cd /opt/tetrix-hospital && POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} ./scripts/backup.sh >> /var/log/tetrix-backup.log 2>&1"
          (crontab -l 2>/dev/null | grep -v "tetrix-hospital.*backup.sh" ; echo "$CRON_CMD") | crontab -

    # Deploy to production server
    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: ${{ vars.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/tetrix-hospital
          
          # Sync repository to ensure latest code
          git fetch origin production
          git reset --hard origin/production
          
          # Build and update services
          if [[ "${{ steps.changed-files.outputs.backend }}" == "true" ]]; then
            echo "Building and updating backend service..."
            docker-compose -f docker-compose.prod.yml up -d --build app
          fi
          
          if [[ "${{ steps.changed-files.outputs.nginx }}" == "true" ]]; then
            echo "Building and updating nginx service..."
            docker-compose -f docker-compose.prod.yml up -d --build nginx
          fi
          
          # Clean only dangling images
          docker image prune -f

    # Verify deployment with retries
    - name: Check deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.PROD_HOST }}
        username: ${{ vars.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        env:
          APP_PORT: ${{ vars.APP_PORT || '5000' }}
        script: |
          # Wait for services to be healthy
          for i in {1..30}; do
            HEALTH_OK=true
            
            # Check backend if updated
            if [[ "${{ steps.changed-files.outputs.backend }}" == "true" ]]; then
              if ! curl -f "http://localhost:${APP_PORT}/health"; then
                HEALTH_OK=false
              fi
            fi
            
            if [[ "$HEALTH_OK" == "true" ]]; then
              echo "All services are healthy"
              exit 0
            fi
            
            echo "Waiting for services to be healthy... ($i/30)"
            sleep 2
          done
          echo "Services failed to become healthy"
          exit 1