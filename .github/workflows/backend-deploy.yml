name: Deploy Backend

# Trigger on specific changes
on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'nginx/**'
      - 'docker-compose.prod.yml'
      - '.github/workflows/backend-deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Required secrets:
    # - DOCKER_HUB_USERNAME: Your Docker Hub username
    # - DOCKER_HUB_TOKEN: Docker Hub access token
    # - PROD_HOST: Production server IP/domain
    # - PROD_USERNAME: SSH username
    # - PROD_SSH_KEY: SSH private key
    
    steps:
    - uses: actions/checkout@v3
    
    # Determine changed services
    - name: Check changed files
      id: changed-files
      run: |
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^backend/"; then
          echo "backend=true" >> $GITHUB_OUTPUT
        fi
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^frontend/"; then
          echo "frontend=true" >> $GITHUB_OUTPUT
        fi
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^nginx/"; then
          echo "nginx=true" >> $GITHUB_OUTPUT
        fi

    - name: Set up Python
      if: steps.changed-files.outputs.backend == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      if: steps.changed-files.outputs.backend == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov

    - name: Run tests
      if: steps.changed-files.outputs.backend == 'true'
      run: |
        cd backend
        pytest --cov=. --cov-report=xml

    - name: Upload coverage
      if: steps.changed-files.outputs.backend == 'true'
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Docker Hub authentication
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    # Build and push backend if changed
    - name: Build and push backend
      if: steps.changed-files.outputs.backend == 'true'
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/tetrix-hospital-backend:latest
        cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/tetrix-hospital-backend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/tetrix-hospital-backend:buildcache,mode=max

    # Build and push frontend if changed
    - name: Build and push frontend
      if: steps.changed-files.outputs.frontend == 'true'
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/tetrix-hospital-frontend:latest

    # Deploy to production server
    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /opt/tetrix-hospital
          
          # Pull and update only changed services
          if [[ "${{ steps.changed-files.outputs.backend }}" == "true" ]]; then
            echo "Updating backend service..."
            docker-compose -f docker-compose.prod.yml pull app
            docker-compose -f docker-compose.prod.yml up -d --no-deps --build app
          fi
          
          if [[ "${{ steps.changed-files.outputs.frontend }}" == "true" ]]; then
            echo "Updating frontend service..."
            docker-compose -f docker-compose.prod.yml pull frontend
            docker-compose -f docker-compose.prod.yml up -d --no-deps --build frontend
          fi
          
          if [[ "${{ steps.changed-files.outputs.nginx }}" == "true" ]]; then
            echo "Updating nginx service..."
            docker-compose -f docker-compose.prod.yml up -d --no-deps --build nginx
          fi
          
          # Clean only dangling images
          docker image prune -f

    # Verify deployment with retries
    - name: Check deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          # Wait for services to be healthy
          for i in {1..30}; do
            HEALTH_OK=true
            
            # Check backend if updated
            if [[ "${{ steps.changed-files.outputs.backend }}" == "true" ]]; then
              if ! curl -f http://localhost:5000/health; then
                HEALTH_OK=false
              fi
            fi
            
            # Add other service health checks here
            
            if [[ "$HEALTH_OK" == "true" ]]; then
              echo "All services are healthy"
              exit 0
            fi
            
            echo "Waiting for services to be healthy... ($i/30)"
            sleep 2
          done
          echo "Services failed to become healthy"
          exit 1